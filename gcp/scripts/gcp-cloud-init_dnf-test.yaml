#cloud-config
# vim: syntax=yaml
#
###=============================================================================###
# Bootstrap setup for a dnf/yum based Linux server
# 
# Make sure you have all of the tools you need!
# 
# cloud-init docs:
#   https://cloudinit.readthedocs.io/en/latest/index.html 
# 
# Examples:
#   https://cloudinit.readthedocs.io/en/latest/topics/examples.html
#
#   --- Modified for GCP Rocky Linux ---
#
#  Uses install scripts for greater portability
# 
#  Whole thing will take at least 7-10 minutes and reboot once
#
###=============================================================================###

# Upgrade the instance on first boot
package_update: true
package_upgrade: true

# Set default user to "someuser"  (modify as required)
# Does not reliably work
#system_info:
#  default_user:
#    name: someuser

packages:
  # Install additional packages on first boot
  - librdmacm
  - libaio-devel
  - libtool
  - autoconf 
  - pkg-config
  - cmake
  - tmux
  - git
  - tree
  - numactl
  - wget
  - traceroute
  - nmap
  - dnsutils
  - perf
  - bcc-tools
  - blktrace
  - sysstat
  - stress-ng
  - pciutils
  #- nvme-cli
  - nfs-utils
  # For development
  - boost-devel
  - ncurses-devel
  - numactl-devel
###--- End packages

###--- Create and/or modify files on the system
write_files:
#--- Append settings to .bashrc
#--- For labuser 
- path: /home/labuser/.bashrc
  content: |
    
    # Added by cloud-init
    alias la="ls -Av"
    alias ls="ls -hF --color=auto"
    alias l="ls -CFv"
    alias ll='ls -lhvF --group-directories-first'
    alias lla='ls -alhvF --group-directories-first'
    alias egrep='egrep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias grep='grep --color=auto'
    alias cdb='cd -'
    alias cdu='cd ..'
    alias df='df -kh'
    alias du='du -h'

    set -o vi
    bind 'set bell-style none'

  owner: labuser:labuser
  append: true
  defer: true
#--- For root
- path: /root/.bashrc
  content: |
    
    ####
    # Added by cloud-init
    alias ls="ls -hFv --color=auto"
    alias l="ls -CFv"
    alias la="ls -Av"
    alias ll='ls -lhvF --group-directories-first'
    alias lla='ls -alhvF --group-directories-first'
    alias egrep='egrep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias grep='grep --color=auto'
    alias cdb='cd -'
    alias cdu='cd ..'
    alias df='df -kh'
    alias du='du -h'

    set -o vi
    bind 'set bell-style none'

  owner: root:root
  append: true
# Script:
# Compile and install ElBencho - need NumCPU
# Download and untar NFS driver
- path: /tmp/install_nfs_driver.sh
  permissions: '0755'
  content: |
    #!/bin/bash

    # NFS Driver
    cd /root
    filename=$(curl -sSf https://vast-nfs.s3.amazonaws.com/download.sh | bash -s -- | grep "Downloaded:" | awk '{print $2}')
    tar xf $filename
    curl -sSf https://vast-nfs.s3.amazonaws.com/download.sh -o /root/downloadnfsdrsiver.sh
    nfsdir="${filename%.tar.xz}"
 
    cd ${nfsdir}
    echo "Attempting to run build.sh in ${nfsdir}" >> /tmp/cloud-init-out.txt
    ls -la "${nfsdir}" >> /tmp/cloud-init-out.txt

    ./build.sh bin >> /tmp/cloud-init-out.txt 2>&1
    echo "build.sh completed with exit code $?" >> /tmp/cloud-init-out.txt

#
# Create script to install software and modify grub
# dool
# FIO
# iperf3
# sockperf
#
- path: /tmp/compiletools.sh
  permissions: '0755'
  content: |
    #!/bin/bash
    echo "compiletools.sh started at $(date)" >> /tmp/cloud-init-out.txt

    dnf group install -y "Development Tools"
    echo "Development tools installed successfully." >> /var/log/cloud-init-output.log
    
    # Don't need these
    #dnf install python3-pip -y
    #pip3 install ninja meson
    
    # Prep folders
    cd /root
    mkdir -p .local/bin
    mkdir git && cd git

    # Compile dool
    git clone https://github.com/scottchiefbaker/dool.git
    cd dool && ./install.py && cd ..

    # Compile FIO
    git clone https://github.com/axboe/fio.git
    cd fio && ./configure && make && make install && cd ..

    # Compile iperf
    git clone https://github.com/esnet/iperf.git
    cd iperf && ./configure && make && make install && cd ..

    # Compile sockperf
    git clone https://github.com/mellanox/sockperf
    cd sockperf && ./autogen.sh && ./configure && make && make install && cd ..
    
    git clone https://github.com/breuner/elbencho.git
    cd elbencho && make -j $(nproc) && make rpm
    dnf install -y ./packaging/RPMS/x86_64/elbencho*.rpm
    cd /root 
    
    # Scripts for labuser
    cd /home/labuser/
    git clone https://github.com/kvietmeier/scripts.git
    chown -R labuser:labuser /home/labuser/scripts
    
    # NFS Driver
    #cd /root
    #filename=$(curl -sSf https://vast-nfs.s3.amazonaws.com/download.sh | bash -s -- | grep "Downloaded:" | awk '{print $2}')
    #tar xf $filename
    #curl -sSf https://vast-nfs.s3.amazonaws.com/download.sh -o /root/downloadnfsdrsiver.sh
    #nfsdir="${filename%.tar.xz}"

    # Enable chronyd
    systemctl enable chronyd
    systemctl restart chronyd

    dnf clean packages
    mandb

    mkdir -p /home/labuser/output 
    chown labuser:labuser /home/labuser/output
    
    # Update grub to boot from new kernel version
    grub2-mkconfig -o /boot/grub2/grub.cfg
    NEW_KERNEL=$(rpm -q --qf "/boot/vmlinuz-%{VERSION}-%{RELEASE}.%{ARCH}\n" kernel | sort -V | tail -1)
    grubby --set-default "$NEW_KERNEL"
    
    echo "Rebooting into new kernel: $NEW_KERNEL" | tee /var/log/cloud-init-kernel.log
    echo "script compiletools.sh ran" >> /tmp/cloud-init-out.txt
    reboot
#
# Setup chrony for GCP
#
- path: /etc/chrony/chrony.conf
  content: |
    # Chrony configuration for GCP
    server metadata.google.internal iburst
    driftfile /var/lib/chrony/drift
    makestep 1.0 3
    rtcsync
    logdir /var/log/chrony
    allow 0.0.0.0/0
    bindcmdaddress 127.0.0.1
    bindcmdaddress ::1
#
- path: /root/CONFIGURED_BY_CLOUD_INIT
#
###--- End write_files
#
###--- Start runcmd
runcmd:
  # Enable GCP Ops Agent
  - curl -sSO https://dl.google.com/cloudagents/add-google-cloud-ops-agent-repo.sh
  - bash add-google-cloud-ops-agent-repo.sh --also-install
  - systemctl restart google-cloud-ops-agent
  # Run our install scripts
  #- bash /tmp/install_tools.sh
  - bash /tmp/compiletools.sh
###--- End runcmd

###--- Users - Leave here for now
#      Need to add your keys - will populate .ssh/authorized_keys
users:
  - name: labuser
    gecos: Lab User
    groups: sudo
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDj/oqU+Kjs/sLN67JZ798S42efzK/jBKE3RWj4n9SJR6FYaijoy46qXWoC26ibOKhsO01g4OPeZAoUJq39hwsWNw/bTFKsjBuO6jRaNroybK2/lzQuX2oku0pclreXjPy/x0Mrf9ZD6Jzm0sbr9bk52KUdy6cPjFBIvVUNGXRLFm6AKggqWDzY3+9ONLyAihginw9N+yF28bQYjUwUbuy4k9gkD+cTWKNl1Al58rOAuifAJDMAA7CrlsNXK3nf4VtaURh4n3CbOoJI+auRiPfO4EoJGYVYVFy6V2NeSDV52q+7SUXXclb6c6DEVxLu2YAe9sMmUkL/N62uKAxrOqX+qJHXdOm/TOcHB+tw/jTDafRSJcPZ+EuGw4FjROEtEAMHus2poHN0qF0vdTm0DuNWHtH+ABpCHP8rvQeybkR3yFjStTyJlTLPTnY0/8gt8ykLWFyYtZott+hszXe6NM8lQlK9BiRi6e3F+LRBr1fMpQtOV0gemhaqYwCRdZKckqM= karlv@linuxtools
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDOVhK8T5vJgKqXzSgDryh1EQEReE1lU9CvlBK8v4bG+eTjhPqacXqPkUWPlnM+kA1l3xe/GBxbIeoJ/WruUZV58SBjUUEMYN0qyKVwl+G5GqhijGAsWNC1KsfpTHNRRplZWAkKajAzb57kCzdNvFmOi86ENhn4gYFTWqAPEYALMnq6T1D52SELJGs/A3fwDEE99nTjcZ4/Huv1z+WWJmZEkSRWNtYLD/mx+cP41UHKCEIgsffvKH3o/IHgpsDGi5sQ8AKHChNkHb3vWQVPHx1BZDwxEUG7SPjY4gc/wRtrdauzMvdKvm9AUi1paY2PCGViLcysv619hQj02k/OQBJBy7MqplB1waoisxDuxKMSKjeKTyMGbMfv+MCrQd1iT+qdQtQImvyxRtQnYnbNMjnLPYUey7/kTkb4Xggm/hhuJOxnFqH/9WILDb81I4jElis+raXh0Vnt7gQ7OAO74osiLqD7uGuhytRCLqnU5VQmEAGdpxahxtirRu0eVQr/Ncs= karl.vietmeier@Tandaloor


###--- Misc system configuration
timezone: "America/Los_Angeles"

final_message: Post creation OS config done

###--- End File