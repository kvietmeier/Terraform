#cloud-config
# vim: syntax=yaml
#
###=============================================================================###
# Bootstrap setup for a Linux server
#     This entire file will take 4-5min to complete - especially compiling.
#
# cloud-init docs:
#   https://cloudinit.readthedocs.io/en/latest/index.html 
# 
# Examples:
#   https://cloudinit.readthedocs.io/en/latest/topics/examples.html
#
###=============================================================================###

# Upgrade the instance on first boot
# (ie run apt-get upgrade)
package_upgrade: true

# Set default user to "azureuser"
system_info:
  default_user:
    name: azureuser

# Add some additional repos
apt_sources:
  # Python
  - source: "ppa:deadsnakes/ppa"
  # stress-ng
  - source: "ppa:colin-king/stress-ng"

###---  Create/modify system files for tuning
write_files:
  # Make sure memory settings persist
  - path: /etc/sysctl.d/99-sysctl.conf
    content: |
      # Added for VoltDB
      vm.overcommit_memory=1
      vm.max_map_count=1048576
      vm.swappiness=0
    permissions: 0644
    append: true
  - path: /etc/systemd/system/disable-thp.service
    content: |
      # Added for VoltDB

      [Unit]
      Description=Disable Transparent Huge Pages (THP)
      DefaultDependencies=no
      After=local-fs.target
      Before=sysinit.target
      
      [Service]
      Type=oneshot
      ExecStart=/bin/sh -c 'echo never | tee /sys/kernel/mm/transparent_hugepage/enabled > /dev/null'
      ExecStart=/bin/sh -c 'echo never | tee /sys/kernel/mm/transparent_hugepage/defrag > /dev/null'
      
      [Install]
      WantedBy=basic.target
    permissions: 0644
  - path: /etc/systemd/system/tune_eth0.service
    content: |
      # Added for VoltDB

      [Unit]
      Description=Tune the ethernet interface
      DefaultDependencies=no
      After=local-fs.target
      Before=sysinit.target
      
      [Service]
      Type=oneshot
      ExecStart=/bin/sh -c 'ethtool -K eth0 tso off'
      ExecStart=/bin/sh -c 'ethtool -K eth0 gro off'
      
      [Install]
      WantedBy=basic.target
    permissions: 0644
  - path: /root/CONFIGURED_BY_CLOUD_INIT

###--- End write_files

# Install additional packages on first boot
packages:
  # DPDK Dependencies
  - librdmacm-dev
  - librdmacm1
  - libnuma-dev
  - libmnl-dev
  - libpcap-dev
  - autoconf 
  - lib32z1
  - meson
  - pkg-config
  - cmake
  # Python3
  - python3-pyelftools
  - python-pyelftools
  - python3-pip
  - python3.9
  # Useful stuff you might need/want
  - libtool
  - screen
  - build-essential
  - git
  - tree
  - dstat
  - slurm
  - psmisc
  - net-tools
  - nfs-common
  - sysstat
  - stress-ng
  - dnsutils
  - numactl
  - ifstat
  - curl
  ### For compiling Volt
  - tcptrack
  - bmon
  - prometheus
  - maven
  - ant 
  - ant-optional 
  - valgrind
  - ccache
  - python-httplib2 
  - python-setuptools
  - apt-show-versions
  #- openjdk-8-jdk
  # Need these to support apt over http
  - apt-file
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg-agent
  - software-properties-common
  # Opensource Volt needs 1.8 SDK to compile
  - openjdk-17-jre-headless
###--- End Packages

###--- Run commands once on first boot - clone and compile useful tools
runcmd:
  ###--- VoltDB settings - https://docs.voltactivedata.com/AdminGuide/adminmemmgt.php
  # Need to add the ulimit commands:
  #  ulimit -n 40000
  #  ulimit -u 10000
  - [echo, "never", '>', /sys/kernel/mm/transparent_hugepage/enabled] 
  - [echo, "never", '>', /sys/kernel/mm/transparent_hugepage/defrag] 
  - [echo, "0", '>', /proc/sys/vm/swappiness] 
  - [sysctl, -w, vm.overcommit_memory=1]
  - [sysctl, -w, vm.max_map_count=1048576]
  - [sysctl, -w, vm.swappiness=0]
  - [sysctl, -p]
  # - need to know the interface numbers (not working)
  #- [ethtool, -K, eth0, tso, off]
  #- [ethtool, -K, eth0, gro, off]
  - ethtool -K eth0 tso off
  - ethtool -K eth0 gro off
  # Enable systemd services
  - [systemctl, enable, tune_eth0.service]
  - [systemctl, start, tune_eth0.service]
  - [systemctl, enable, disable-thp.service]
  - [systemctl, start, disable-thp.service]
  ###
  #   Grab Volt binaries/scripts and license from a blobstore
  ###
  - [cd, /home/azureuser]
  - [wget, -q, -P, /home/azureuser, <URI>]
  - [wget, -q, -P, /home/azureuser, <URI>]
  - [wget, -q, -P, /home/azureuser, <URI>]
  - [wget, -q, -P, /home/azureuser, <URI>]
  - [tar, xf, ./VoltDBbindir.tar.gz]
  - [chown, -R, azureuser:azureuser, ./bin]
  - [tar, xf, ./voltdb-ent-11.4.tar.gz]
  - [rm, ./voltdb-ent-11.4.tar.gz]
  - [rm, ./VoltDBbindir.tar.gz]
  - [chown, -R, azureuser:azureuser, ./voltdb-ent-11.4]
  - [chown, -R, azureuser:azureuser, ./license.xml]
  - [chown, -R, azureuser:azureuser, ./deployment-default.xml]
  - [cd, /home/ubuntu]
  - [wget, -q, -P, /home/ubuntu, <URI>]
  - [wget, -q, -P, /home/ubuntu, <URI>]
  - [wget, -q, -P, /home/ubuntu, <URI>]
  - [wget, -q, -P, /home/ubuntu, <URI>]
  - [tar, xf, ./VoltDBbindir.tar.gz]
  - [chown, -R, ubuntu:ubuntu, ./bin]
  - [tar, xf, ./voltdb-ent-11.4.tar.gz]
  - [rm, ./voltdb-ent-11.4.tar.gz]
  - [rm, ./VoltDBbindir.tar.gz]
  - [chown, -R, ubuntu:ubuntu, ./voltdb-ent-11.4]
  - [chown, -R, ubuntu:ubuntu, ./license.xml]
  - [chown, -R, ubuntu:ubuntu, ./deployment-default.xml]
  # Put a backup copy in /root
  - [wget, -q, -P, /root, <URI>]
  - [wget, -q, -P, /root, <URI>]
  - [wget, -q, -P, /root, <URI>]
  - [wget, -q, -P, /root, <URI>]
  #
  ###--- Needed for DPDK
  - [pip3, install, ninja]
  - [pip3, install, meson]
  #
  # Create some default project directories for the users
  - [mkdir, /root/output]
  - [mkdir, /home/azureuser/output]
  - [mkdir, /home/azureuser/scripts]
  - [chown, azureuser:azureuser, /home/azureuser/output]
  - [chown, azureuser:azureuser, /home/azureuser/scripts]
  - [mkdir, /home/ubuntu/output]
  - [mkdir, /home/ubuntu/scripts]
  - [chown, ubuntu:ubuntu, /home/ubuntu/output]
  - [chown, ubuntu:ubuntu, /home/ubuntu/scripts]
  #
  ###--- Compile Testing Software 
  - [mkdir, /root/git]
  # Compile/install iperf3
  - [cd, /root/git]
  - [git, clone, https://github.com/esnet/iperf.git]
  - [cd, iperf]
  - ['./configure']
  - [make]
  - [make, install]
  - [/usr/sbin/ldconfig]
  # Compile/install sockperf
  - [cd, ..]
  - [git, clone, https://github.com/mellanox/sockperf]
  - [cd, sockperf]
  - ['./autogen.sh']
  - ['./configure']
  - [make]
  - [make, install]
  # Compile/install FIO
  - [cd, ..]
  - [git, clone, https://github.com/axboe/fio.git]
  - [cd, fio]
  - ['./configure']
  - [make]
  - [make, install]
  - [cd, ..]
  # Compile Python3.10
  #
  #  <place holder - this is a long process - at least 4min by itself
  #  Need to investigate, lots of options
  #
  ###--- System cleanup
  ### apt housekeeping
  - [apt-get, clean, -yy]
  - [apt-get, autoremove, -yy]
  - [mandb, -c]
  - [apt-file, update]
###--- End runcmd


###--- Users
users:
  # Configure defined "default" user with additional keys and sudo access
  - name: default
    ssh-authorized-keys:
    - ssh-rsa  <key1>
    - ssh-rsa  <key2>
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo
    shell: /bin/bash
  # Configure Azure added user - With additional SSH keys
  - name: ubuntu
    ssh-authorized-keys:
    - ssh-rsa  <key1>
    - ssh-rsa  <key2>
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo
    shell: /bin/bash
###--- END Users


###--- Misc system configuration
# Use Azure host for timesync
timezone: "America/Los_Angeles"
ntp:
  enabled: true
  ntp_client: chrony
  config:
    confpath: /etc/chrony/chrony.conf
    packages:
     - chrony
    service_name: chrony
    template: |
       ## template:jinja
       driftfile /var/lib/chrony/chrony.drift
       logdir /var/log/chrony
       maxupdateskew 100.0
       local stratum 2
       refclock PHC /dev/ptp_hyperv poll 3 dpoll -2
       makestep 1.0 -1

###
final_message: Post creation OS config done
###

###--- End File